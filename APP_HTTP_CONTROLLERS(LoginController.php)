<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\Log;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth; // Add this import
//use App\Models\User; // Add this import

class LoginController extends Controller
{
    // Existing login method for Session-based authentication
    public function login(Request $request)
    {
        $email = $request->input('email');
        $password = $request->input('password');
    
        // Use DB query to find the user by email instead of username
        $user = DB::table('users')->where('email', $email)->first();
    
        if ($user && Hash::check($password, $user->password)) {
            Session::put('user_id', $user->id);
            return response()->json(['success' => true, 'message' => 'Login successful!']);
        } else {
            return response()->json(['success' => false, 'error' => 'Invalid credentials'], 401);
        }
    }

    // New login method using Sanctum (Token-based Authentication)
    public function apiLogin(Request $request)
    {
        $credentials = [
            'email' => 'required|email',
            'password' => $request->password,
        ];
        

        if (!Auth::attempt($credentials)) {
            return response()->json(['success' => false, 'error' => 'Invalid credentials'], 401);
        }
    
        $user = Auth::user();
        $token = $user->createToken('auth_token')->accessToken;
    
        return response()->json([
            'success' => true,
            'message' => 'Login successful!',
            'access_token' => $token, // Now using the correct variable
            'token_type' => 'Bearer',
            'user' => [
                'id' => $user->id,
                'email' => $user->email,
                'name' => $user->name,
            ],
        ]);
    }   
        
// In LoginController.php
public function checkLogin(Request $request)
{
    try {
        $user = $request->user(); // Gets authenticated user via Passport
        
        if (!$user) {
            return response()->json([
                'loggedIn' => false,
                'error' => 'Not authenticated'
            ], 401);
        }

        return response()->json([
            'loggedIn' => true,
            'user' => [
                'id' => $user->id,
                'email' => $user->email,
                'name' => $user->name
            ]
        ]);
        
    } catch (\Exception $e) {
        return response()->json([
            'loggedIn' => false,
            'error' => 'Authentication check failed'
        ], 500);
    }
}

    // Your protected route method
    public function secretData()
    {
        if (!Session::has('user_id')) {
            return response()->json(['error' => 'Not logged in'], 403);
        }

        return response()->json(['data' => 'Secret stuff']);
    }
}
