<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth; // Add this import


class LoginController extends Controller
{
    // Session-based login (can keep if you need it for web routes)
    public function login(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
            'password' => 'required',
        ]);

        $user = User::where('email', $request->email)->first();

        if (!$user || !Hash::check($request->password, $user->password)) {
            return response()->json(['success' => false, 'error' => 'Invalid credentials'], 401);
        }

        // If you still need session for some web routes
        Auth::login($user);
        return response()->json(['success' => true, 'message' => 'Login successful!']);
    }

    // Sanctum API login (updated)
    public function apiLogin(Request $request)
    {
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required'
        ]);

        $user = User::where('email', $credentials['email'])->first();

        if (!$user || !Hash::check($credentials['password'], $user->password)) {
            return response()->json([
                'success' => false,
                'message' => 'Invalid credentials',
                'errors' => [
                    'email' => ['These credentials do not match our records.']
                ]
            ], 401);
        }


        return response()->json([
            'success' => true,
            'access_token' => $user->createToken('authToken')->plainTextToken,
            'token_type' => 'Bearer',
            'user' => [
                'id' => $user->id,
                'username' => $user->username,
                'email' => $user->email,
                'age' => $user->age
            ]
        ]);
    }

    // Updated checkLogin for Sanctum
    public function checkLogin(Request $request)
    {
        try {
            $user = $request->user(); // Now using Sanctum's user resolver
            
            if (!$user) {
                return response()->json([
                    'loggedIn' => false,
                    'error' => 'Not authenticated'
                ], 401);
            }

            return response()->json([
                'loggedIn' => true,
                'user' => $user->only(['id', 'email', 'name'])
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'loggedIn' => false,
                'error' => 'Authentication check failed'
            ], 500);
        }
    }

    // Protected route method (updated for Sanctum)
    public function secretData()
    {
        $user = Auth::user();
        
        if (!$user) {
            return response()->json(['error' => 'Not logged in'], 403);
        }

        return response()->json(['data' => 'Secret stuff for ' . $user->name]);
    }
}
